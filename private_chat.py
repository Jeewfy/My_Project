import asyncio
import os
import aiosqlite
from aiogram import Dispatcher, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from datetime import datetime

from keyboards import (
    get_main_keyboard,
    get_games_keyboard,
    get_back_keyboard,
    get_channel_inline_keyboard,
    get_feedback_inline_keyboard,
    get_settings_keyboard,
    get_notifications_keyboard,
    get_language_keyboard
)

from database import db

CHANNEL_ID = os.getenv('CHANNEL_ID')


class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

class GameState(StatesGroup):
    waiting_for_guess = State()
    playing_number_game = State()

class SettingsState(StatesGroup):
    waiting_for_language = State()
    waiting_for_notifications = State()

class SupportState(StatesGroup):
    waiting_for_support_message = State()

class AdminState(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_broadcast_message = State()

def setup_private_handlers(dp: Dispatcher, admin_ids: list):
    
    @dp.startup()
    async def on_startup():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    @dp.message(Command('start'))
    async def start_command(message: types.Message):
        user = message.from_user
        user_data = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        
        await db.add_or_update_user(user_data)
        
        
        await db.log_user_action(user.id, 'start_command', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —á–∞—Ç')
        
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
            "ü§ñ –Ø - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–æ—Ç, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ø–æ—Ä—Ç–∞!\n\n"
            "‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ üìù –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
            "‚Ä¢ üéÆ –ò–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã\n"
            "‚Ä¢ üì¢ –î–µ–ª–∏—Ç—å—Å—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏\n"
            "‚Ä¢ ‚öΩ –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã\n\n"
            "üéØ <b>–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        )
        
        await message.answer(welcome_text, parse_mode="HTML")
        await asyncio.sleep(0.5)
        await message.answer(
            "üõ† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            parse_mode="HTML", 
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —á–∞—Ç')

    @dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def stats_button(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        
        await db.log_user_action(user_id, 'stats_button_click')
        
        if user_id in admin_ids:
            try:
                
                stats = await db.get_total_stats()
                user_stats = await db.get_user_stats(user_id)
                
                admin_stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–ê–¥–º–∏–Ω):</b>\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                    f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                    f"üìù –û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {stats['total_feedback']}\n"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"üì® –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {user_stats[4] if user_stats else 0}\n"
                    f"üìÖ –° –Ω–∞–º–∏ —Å: {user_stats[6].split()[0] if user_stats else '–ù–µ–¥–∞–≤–Ω–æ'}"
                )
                
                await message.answer(admin_stats_text, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            
            user_stats = await db.get_user_stats(user_id)
            user_stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üë§ –ò–º—è: {message.from_user.first_name}\n"
                f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_stats[4] if user_stats else 1}\n"
                f"üìÖ –° –Ω–∞–º–∏ —Å: {user_stats[6].split()[0] if user_stats else '–°–µ–≥–æ–¥–Ω—è'}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üí° <i>–ë–æ–ª—å—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</i>"
            )
            await message.answer(user_stats_text, parse_mode="HTML")

    @dp.message(F.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    async def feedback_button(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'feedback_button_click')
        
        await message.answer(
            "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        
        await message.answer(
            "üìû <b>–ë—ã—Å—Ç—Ä—ã–µ –æ–ø—Ü–∏–∏:</b>",
            parse_mode="HTML",
            reply_markup=get_feedback_inline_keyboard()
        )
        await state.set_state(FeedbackState.waiting_for_feedback)

    @dp.message(FeedbackState.waiting_for_feedback)
    async def process_feedback(message: types.Message, state: FSMContext, bot: Bot):
        user_id = message.from_user.id
        
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
            return

        feedback_text = message.text
        user = message.from_user
        
        
        await db.add_feedback(user_id, feedback_text)
        await db.log_user_action(user_id, 'feedback_sent', f"–î–ª–∏–Ω–∞: {len(feedback_text)}")
        
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{feedback_text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

    
    @dp.message(Command('support'))
    async def support_command(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
       
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'support_command')
        
        await message.answer(
            "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(SupportState.waiting_for_support_message)

    @dp.message(SupportState.waiting_for_support_message)
    async def process_support_message(message: types.Message, state: FSMContext, bot: Bot):
        user_id = message.from_user.id
        
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
            return

        support_text = message.text
        user = message.from_user
        
        
        await db.add_feedback(user_id, f"SUPPORT: {support_text}")
        await db.log_user_action(user_id, 'support_sent', f"–î–ª–∏–Ω–∞: {len(support_text)}")
        
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{support_text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        await message.answer(
            "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

    
    @dp.message(Command('users'))
    async def show_users(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        if user_id not in admin_ids:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            users = await db.get_all_users()
            if not users:
                await message.answer("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            for i, user in enumerate(users[:10], 1):  
                user_id, username, first_name, last_name, messages_count, first_seen, last_seen = user
                name = f"{first_name or ''} {last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username_str = f"(@{username})" if username else ""
                
                users_text += (
                    f"{i}. {name} {username_str}\n"
                    f"   ID: {user_id} | –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                    f"   –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen.split()[0]}\n"
                    f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_seen.split()[0]}\n\n"
                )
            
            if len(users) > 10:
                users_text += f"<i>... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
            
            await message.answer(users_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    @dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
    async def help_button(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'help_button_click')
        
        help_text = (
            "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "üéÆ <b>–ò–≥—Ä—ã</b> - –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
            "üì¢ <b>–ö–∞–Ω–∞–ª</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n\n"
            "‚öΩ <b>–í –≥—Ä—É–ø–ø–∞—Ö:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞\n"
            "‚Ä¢ –ò–≥—Ä–∞ –≤ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n"
            "üì¢ <b>–í –∫–∞–Ω–∞–ª–µ:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            "üí° <b>–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /support - —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
            "‚Ä¢ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω—ã)\n\n"
            "üéØ <b>–ù–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!</b>"
        )
        await message.answer(help_text, parse_mode="HTML")

    @dp.message(F.text == "üì¢ –ö–∞–Ω–∞–ª")
    async def channel_info(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'channel_info_click')
        
        channel_info_text = (
            "üì¢ <b>–ù–∞—à —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª:</b>\n\n"
            "‚öΩ –°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "üèÜ –û–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
            "üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "üî• –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π!"
        )
        await message.answer(
            channel_info_text, 
            parse_mode="HTML",
            reply_markup=get_channel_inline_keyboard()
        )

    @dp.message(F.text == "üéÆ –ò–≥—Ä—ã")
    async def games_menu(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'games_menu_click')
        
        await message.answer(
            "üéÆ <b>–ò–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n"
            "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É\n"
            "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª\n\n"
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–≤–µ—Å–µ–ª–∏–º—Å—è! üéâ",
            parse_mode="HTML",
            reply_markup=get_games_keyboard()
        )

    
    @dp.message(F.text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
    async def start_number_game(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'start_number_game')
        
        import random
        secret_number = random.randint(1, 100)
        attempts = 0
        
        
        await state.update_data(
            secret_number=secret_number,
            attempts=attempts,
            max_attempts=10
        )
        
        await message.answer(
            f"üéØ <b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!</b>\n\n"
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫.\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ —á–∞—Ç!\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π 'üîô –ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã</i>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        
        await state.set_state(GameState.playing_number_game)

    @dp.message(GameState.playing_number_game)
    async def process_game_guess(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard())
            await db.log_user_action(user_id, 'game_exited')
            return
        
        try:
            guess = int(message.text)
            user_data = await state.get_data()
            secret_number = user_data['secret_number']
            attempts = user_data['attempts'] + 1
            max_attempts = user_data['max_attempts']
            
            await state.update_data(attempts=attempts)
            
            if guess < 1 or guess > 100:
                await message.answer("üìè –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
                return
            
            if guess < secret_number:
                await message.answer(f"üî∫ –ß–∏—Å–ª–æ –ë–û–õ–¨–®–ï —á–µ–º {guess}\n"
                                   f"–ü–æ–ø—ã—Ç–∫–∞: {attempts}/{max_attempts}")
            elif guess > secret_number:
                await message.answer(f"üîª –ß–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —á–µ–º {guess}\n"
                                   f"–ü–æ–ø—ã—Ç–∫–∞: {attempts}/{max_attempts}")
            else:
                
                await message.answer(
                    f"üéâ <b>–ü–û–ë–ï–î–ê!</b> üéâ\n\n"
                    f"‚úÖ –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}!\n"
                    f"üéØ –ü–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {attempts}\n\n"
                    f"–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? –ù–∞–∂–º–∏ 'üéÆ –ò–≥—Ä—ã'",
                    parse_mode="HTML",
                    reply_markup=get_main_keyboard()
                )
                await db.log_user_action(user_id, 'game_won', f"–ß–∏—Å–ª–æ: {secret_number}, –ü–æ–ø—ã—Ç–æ–∫: {attempts}")
                await state.clear()
                return
            
            
            if attempts >= max_attempts:
                await message.answer(
                    f"üíî <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n"
                    f"‚ùå –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                    f"üî¢ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {secret_number}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üéØ",
                    parse_mode="HTML",
                    reply_markup=get_main_keyboard()
                )
                await db.log_user_action(user_id, 'game_lost', f"–ß–∏—Å–ª–æ: {secret_number}")
                await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!")

    @dp.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")
    async def random_number(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'random_number_click')
        
        import random
        number = random.randint(1, 1000)
        await message.answer(
            f"üé≤ <b>–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ:</b>\n\n"
            f"–í–∞—à–µ —á–∏—Å–ª–æ: <b>{number}</b>\n\n"
            f"–ú–æ–∂–µ—Ç –±—ã—Ç—å, —ç—Ç–æ –≤–∞—à–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ? üòä",
            parse_mode="HTML"
        )

    @dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def settings_button(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'settings_button_click')
        
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )

    @dp.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    async def notifications_settings(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'notifications_settings_click')
        
        await message.answer(
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            parse_mode="HTML",
            reply_markup=get_notifications_keyboard()
        )
        await state.set_state(SettingsState.waiting_for_notifications)

    @dp.message(F.text == "üåê –Ø–∑—ã–∫")
    async def language_settings(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'language_settings_click')
        
        await message.answer(
            "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            parse_mode="HTML",
            reply_markup=get_language_keyboard()
        )
        await state.set_state(SettingsState.waiting_for_language)

    @dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_button(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'back_button_click')
        
        current_state = await state.get_state()
        if current_state:
            await state.clear()
            await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        else:
            await message.answer(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )

    @dp.message(Command('guess'))
    async def guess_command(message: types.Message):
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        await db.log_user_action(user_id, 'guess_command_used')
        
        try:
            guess = int(message.text.split()[1])
            import random
            secret = random.randint(1, 100)
            
            if guess == secret:
                await message.answer(f"üéâ –£–≥–∞–¥–∞–ª! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {secret}!")
            else:
                await message.answer(f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª {secret}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
                
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /guess —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 100)")

    
    @dp.message(
        F.chat.type == "private",
        ~F.text.in_([
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚ùì –ü–æ–º–æ—â—å", 
            "üì¢ –ö–∞–Ω–∞–ª", "üéÆ –ò–≥—Ä—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîô –ù–∞–∑–∞–¥",
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üåê –Ø–∑—ã–∫", "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"
        ])
    )
    async def private_message_stats(message: types.Message):
        user = message.from_user
        user_id = user.id
        
        
        user_data = {
            'id': user_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        await db.add_or_update_user(user_data)
        
        
        await db.log_user_action(user_id, 'message_sent', f"–¢–∏–ø: {message.content_type}")
        
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
            reply_markup=get_main_keyboard()
        )

    
    @dp.message(Command('broadcast'))
    async def broadcast_command(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        
        if user_id not in admin_ids:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(AdminState.waiting_for_broadcast_message)

    @dp.message(AdminState.waiting_for_broadcast_message)
    async def process_broadcast(message: types.Message, state: FSMContext, bot: Bot):
        user_id = message.from_user.id
        
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_keyboard())
            return
        
        broadcast_text = message.text
        users = await db.get_all_users()
        
        success_count = 0
        fail_count = 0
        
        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user in users:
            try:
                await bot.send_message(
                    user[0],  # user_id
                    f"üì¢ <b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{broadcast_text}",
                    parse_mode="HTML"
                )
                success_count += 1
                await asyncio.sleep(0.1)  
            except Exception as e:
                fail_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
            reply_markup=get_main_keyboard()
        )
        await db.log_user_action(user_id, 'broadcast_sent', f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {fail_count}")
        await state.clear()

    @dp.callback_query(F.data == "check_subscription")
    async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot):
        await db.log_user_action(callback.from_user.id, 'check_subscription_callback')
        
        try:
            user_id = callback.from_user.id
            member = await bot.get_chat_member(CHANNEL_ID, user_id)
            
            if member.status in ['member', 'administrator', 'creator']:
                await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            else:
                await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
                
        except Exception as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

    @dp.callback_query(F.data.startswith("notifications_"))
    async def notifications_callback(callback: types.CallbackQuery):
        await db.log_user_action(callback.from_user.id, 'notifications_callback')
        
        action = callback.data.split("_")[1]
        if action == "on":
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!", show_alert=False)
        else:
            await callback.answer("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!", show_alert=False)

    @dp.callback_query(F.data.startswith("lang_"))
    async def language_callback(callback: types.CallbackQuery):
        await db.log_user_action(callback.from_user.id, 'language_callback')
        
        lang = callback.data.split("_")[1]
        languages = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "es": "Espa√±ol"}
        await callback.answer(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {languages.get(lang, lang)}!", show_alert=False)

    
    @dp.message(Command('debug_db'))
    async def debug_db_command(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        user_id = message.from_user.id
        
        
        user_data = {
            'id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        await db.add_or_update_user(user_data)
        
        if user_id not in admin_ids:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            
            async with aiosqlite.connect('bot.db') as db_conn:
                cursor = await db_conn.execute("PRAGMA table_info(user_stats)")
                columns = await cursor.fetchall()
                
                debug_text = "üìã <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_stats:</b>\n\n"
                for col in columns:
                    debug_text += f"‚Ä¢ {col[1]} ({col[2]})\n"
                
                
                cursor = await db_conn.execute("SELECT * FROM user_stats LIMIT 5")
                users = await cursor.fetchall()
                
                debug_text += "\nüë• <b>–ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
                for user in users:
                    debug_text += f"ID: {user[0]}, –°–æ–æ–±—â–µ–Ω–∏–π: {user[4]}, –ò–º—è: {user[2] or '–ù–µ—Ç'}\n"
                
                
                cursor = await db_conn.execute("SELECT COUNT(*) FROM user_stats")
                total_users = (await cursor.fetchone())[0]
                
                cursor = await db_conn.execute("SELECT SUM(messages_count) FROM user_stats")
                total_messages = (await cursor.fetchone())[0] or 0
                
                debug_text += f"\nüìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                debug_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                debug_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                
                await message.answer(debug_text, parse_mode="HTML")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ë–î: {e}")