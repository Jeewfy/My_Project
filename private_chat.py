from aiogram import Dispatcher, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
import aiosqlite
from datetime import datetime
import os


from keyboards import (
    get_main_keyboard,
    get_games_keyboard,
    get_back_keyboard,
    get_channel_inline_keyboard,
    get_feedback_inline_keyboard,
    get_settings_keyboard,
    get_notifications_keyboard,
    get_language_keyboard
)

CHANNEL_ID = os.getenv('CHANNEL_ID')

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

class SettingsState(StatesGroup):
    waiting_for_settings = State()

def setup_private_handlers(dp: Dispatcher, admin_ids: list):
    
    @dp.startup()
    async def on_startup():
        async with aiosqlite.connect('bot.db') as db:
            await db.execute('''CREATE TABLE IF NOT EXISTS user_stats 
                             (user_id INTEGER PRIMARY KEY, messages INTEGER DEFAULT 0, 
                             warnings INTEGER DEFAULT 0)''')
            await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    
    @dp.message(Command('start'))
    async def start_command(message: types.Message):
        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–æ—Ç!</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
            "‚Ä¢ üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã\n"
            "‚Ä¢ üì¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá"
        )
        await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_keyboard())
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —á–∞—Ç')

    
    @dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def stats_button(message: types.Message):
        if message.from_user.id in admin_ids:
            try:
                async with aiosqlite.connect('bot.db') as db:
                    cursor = await db.execute('SELECT COUNT(*) FROM user_stats')
                    total_users = (await cursor.fetchone())[0]
                    
                    cursor = await db.execute('SELECT SUM(messages) FROM user_stats')
                    total_messages = (await cursor.fetchone())[0] or 0
                    
                await message.answer(
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

    @dp.message(F.text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    async def feedback_button(message: types.Message, state: FSMContext):
        await message.answer(
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∂–∞–ª–æ–±—É:",
            reply_markup=get_back_keyboard()
        )
        
        await message.answer(
            "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä—ã–º–∏ –æ–ø—Ü–∏—è–º–∏:",
            reply_markup=get_feedback_inline_keyboard()
        )
        await state.set_state(FeedbackState.waiting_for_feedback)

    @dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
    async def help_button(message: types.Message):
        help_text = (
            "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω—ã)\n"
            "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "üéÆ <b>–ò–≥—Ä—ã</b> - –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
            "üì¢ <b>–ö–∞–Ω–∞–ª</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n\n"
            "‚öΩ <b>–í –≥—Ä—É–ø–ø–∞—Ö:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞\n"
            "‚Ä¢ –ò–≥—Ä–∞ –≤ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n"
            "üì¢ <b>–í –∫–∞–Ω–∞–ª–µ:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        await message.answer(help_text, parse_mode="HTML")

    @dp.message(F.text == "üì¢ –ö–∞–Ω–∞–ª")
    async def channel_info(message: types.Message):
        channel_info_text = (
            "üì¢ <b>–ù–∞—à —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª:</b>\n\n"
            "‚öΩ –°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "üèÜ –û–±–∑–æ—Ä—ã –º–∞—Ç—á–µ–π –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
            "üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π!"
        )
        await message.answer(
            channel_info_text, 
            parse_mode="HTML",
            reply_markup=get_channel_inline_keyboard()
        )

    @dp.message(F.text == "üéÆ –ò–≥—Ä—ã")
    async def games_menu(message: types.Message):
        await message.answer(
            "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>\n\n"
            "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
            "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª",
            parse_mode="HTML",
            reply_markup=get_games_keyboard()
        )

    @dp.message(F.text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
    async def guess_number_game(message: types.Message):
        import random
        number = random.randint(1, 100)
        await message.answer(
            f"üéØ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å: /guess —á–∏—Å–ª–æ\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/guess 42</code>",
            parse_mode="HTML"
        )

    @dp.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")
    async def random_number(message: types.Message):
        import random
        number = random.randint(1, 1000)
        await message.answer(f"üé≤ –í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{number}</b>", parse_mode="HTML")

    @dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def settings_button(message: types.Message):
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )

    @dp.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    async def notifications_settings(message: types.Message):
        await message.answer(
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            parse_mode="HTML",
            reply_markup=get_notifications_keyboard()
        )

    @dp.message(F.text == "üåê –Ø–∑—ã–∫")
    async def language_settings(message: types.Message):
        await message.answer(
            "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞:</b>\n\n"
            "Select language:",
            parse_mode="HTML",
            reply_markup=get_language_keyboard()
        )

    @dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
    async def back_button(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state:
            await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

    
    @dp.message(FeedbackState.waiting_for_feedback)
    async def process_feedback(message: types.Message, state: FSMContext, bot: Bot):
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
            return

        feedback_text = message.text
        user = message.from_user
        
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{feedback_text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

    
    @dp.message(Command('guess'))
    async def guess_command(message: types.Message):
        try:
            guess = int(message.text.split()[1])
            import random
            secret = random.randint(1, 100)
            
            if guess == secret:
                await message.answer(f"üéâ –£–≥–∞–¥–∞–ª! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {secret}!")
            else:
                await message.answer(f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª {secret}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
                
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /guess —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 100)")

    
    @dp.callback_query(F.data == "check_subscription")
    async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot):
        try:
            user_id = callback.from_user.id
            member = await bot.get_chat_member(CHANNEL_ID, user_id)
            
            if member.status in ['member', 'administrator', 'creator']:
                await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            else:
                await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
                
        except Exception as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

    @dp.callback_query(F.data.startswith("notifications_"))
    async def notifications_callback(callback: types.CallbackQuery):
        action = callback.data.split("_")[1]
        if action == "on":
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!", show_alert=False)
        else:
            await callback.answer("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!", show_alert=False)

    @dp.callback_query(F.data.startswith("lang_"))
    async def language_callback(callback: types.CallbackQuery):
        lang = callback.data.split("_")[1]
        languages = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "es": "Espa√±ol"}
        await callback.answer(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {languages.get(lang, lang)}!", show_alert=False)

    
    @dp.message(F.chat.type == "private")
    async def private_message_stats(message: types.Message):
        user_id = message.from_user.id
        
        
        try:
            async with aiosqlite.connect('bot.db') as db:
                await db.execute(
                    'INSERT OR IGNORE INTO user_stats (user_id, messages) VALUES (?, 1)',
                    (user_id,)
                )
                await db.execute(
                    'UPDATE user_stats SET messages = messages + 1 WHERE user_id = ?',
                    (user_id,)
                )
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
        
        
        if message.text not in ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚ùì –ü–æ–º–æ—â—å", 
                               "üì¢ –ö–∞–Ω–∞–ª", "üéÆ –ò–≥—Ä—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîô –ù–∞–∑–∞–¥",
                               "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üåê –Ø–∑—ã–∫"]:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
                reply_markup=get_main_keyboard()
            )