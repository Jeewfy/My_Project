import os
import asyncio
import feedparser

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv, find_dotenv
from loguru import logger
import pickle

load_dotenv(find_dotenv())
TOKEN = os.getenv('TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []

bot = Bot(token=TOKEN)
dp = Dispatcher()


from database import db

def load_last_entries():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π RSS –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('last_entries.pkl', 'rb') as f:
            return pickle.load(f)
    except FileNotFoundError:
        return set()

def save_last_entries(entries):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π RSS –≤ —Ñ–∞–π–ª"""
    with open('last_entries.pkl', 'wb') as f:
        pickle.dump(entries, f)

async def fetch_news():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π RSS"""
    last_entries = load_last_entries()
    
    while True:
        try:
            feed = feedparser.parse("https://www.sports.ru/rss/all_news.xml")
            new_entries = []
            
            for entry in feed.entries:
                if entry.link not in last_entries:
                    new_entries.append(entry)
                    last_entries.add(entry.link)
            
            
            if new_entries:
                save_last_entries(last_entries)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_entries)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            
            for entry in reversed(new_entries):
                message = f"<b>{entry.title}</b>\n\n{entry.description}\n\n<a href='{entry.link}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
                try:
                    await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message,
                        parse_mode="HTML",
                        disable_web_page_preview=False
                    )
                    logger.success(f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {entry.title}")
                except Exception as send_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {send_error}")
                
                await asyncio.sleep(2)  
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ RSS –ø–∞—Ä—Å–µ—Ä–µ: {e}")
        
        
        await asyncio.sleep(300)

async def setup_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    try:
        
        from private_chat import setup_private_handlers
        from group import setup_group_handlers
        from channel import setup_channel_handlers
        
        
        setup_private_handlers(dp, ADMIN_IDS)
        setup_group_handlers(dp)
        setup_channel_handlers(dp, bot)
        
        logger.success("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    
    try:
        await db.init_db()
        logger.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    
    
    bot_info = await bot.get_me()
    logger.success(f"–ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"ID –±–æ—Ç–∞: {bot_info.id}")
    logger.info(f"–ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
    
    
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not CHANNEL_ID:
        logger.warning("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, RSS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    if not ADMIN_IDS:
        logger.warning("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    
    await bot.session.close()
    logger.success("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    logger.add(
        'bot.log',
        format='{time:YYYY-MM-DD HH:mm:ss} | {level} | {module}:{function}:{line} | {message}',
        rotation='10 MB',  
        retention='30 days',  
        compression='zip',  
        level='INFO',
        backtrace=True,
        diagnose=True
    )
    
    
    logger.add(
        lambda msg: print(msg, flush=True),
        format='<green>{time:HH:mm:ss}</green> | <level>{level}</level> | <cyan>{message}</cyan>',
        level='INFO',
        colorize=True
    )
    
    try:
        
        await on_startup()
        
        
        await setup_handlers()
        
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ RSS –∑–∞–¥–∞—á–∏...")
        
        
        polling_task = asyncio.create_task(
            dp.start_polling(bot), 
            name="PollingTask"
        )
        rss_task = asyncio.create_task(
            fetch_news(), 
            name="RSSTask"
        )
        
        
        await asyncio.gather(polling_task, rss_task)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        
        await on_shutdown()


@dp.message(Command('bot_stats'))
async def bot_stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        
        stats = await db.get_total_stats()
        
        
        import psutil
        import platform
        from datetime import datetime
        
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        stats_text = (
            "ü§ñ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {stats['total_feedback']}\n\n"
            f"üñ• <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
            f"‚Ä¢ CPU: {psutil.cpu_percent()}%\n"
            f"‚Ä¢ RAM: {memory.percent}% ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)\n"
            f"‚Ä¢ Disk: {disk.percent}% ({disk.used//1024//1024//1024}GB/{disk.total//1024//1024//1024}GB)\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b>\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}\n"
            f"‚Ä¢ RSS: üîÑ –ê–∫—Ç–∏–≤–µ–Ω\n"
        )
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command('db_backup'))
async def db_backup_command(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        import shutil
        from datetime import datetime
        
        
        backup_name = f"backup_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        shutil.copy2('bot.db', backup_name)
        
        await message.answer(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: `{backup_name}`", parse_mode="Markdown")
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î: {backup_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

@dp.message(Command('user_info'))
async def user_info_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info <user_id>")
            return
        
        user_id = int(args[1])
        user_stats = await db.get_user_stats(user_id)
        
        if not user_stats:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        
        (user_id, username, first_name, last_name, 
         messages_count, warnings_count, first_seen, last_seen) = user_stats
        
        user_info_text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {last_name or ''}\n"
            f"üìõ Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}\n"
            f"üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen}\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last_seen}\n"
        )
        
        await message.answer(user_info_text, parse_mode="HTML")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")

if __name__ == "__main__":
    
    os.makedirs('logs', exist_ok=True)
    
    
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")