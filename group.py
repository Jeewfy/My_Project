import random
import re
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from loguru import logger

group_games = {}


BAD_WORDS = [
    '–º–∞—Ç1', '–º–∞—Ç2', '–º–∞—Ç3', '–ø–ª–æ—Ö–æ–µ—Å–ª–æ–≤–æ', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ'
    
]

def setup_group_handlers(dp: Dispatcher):
    
    
    @dp.message(F.chat.type.in_({"group", "supergroup"}) & ~F.text.startswith('/'))
    async def filter_bad_words(message: types.Message):
        
        text = message.text.lower() if message.text else ""
        
        found_bad_words = []
        for word in BAD_WORDS:
            if re.search(r'\b' + re.escape(word) + r'\b', text, re.IGNORECASE):
                found_bad_words.append(word)
        
        if found_bad_words:
            
            try:
                await message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º –≤ —á–∞—Ç–µ {message.chat.id}: {found_bad_words}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            
            warning_msg = (
                f"‚ö†Ô∏è {message.from_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É!\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_bad_words)}"
            )
            await message.answer(warning_msg)

    @dp.message(Command('start_game'),
                F.chat.type.in_({"group", "supergroup"}))
    async def start_game(message: types.Message):
        chat_id = message.chat.id
        secret_number = random.randint(1, 100)
        group_games[chat_id] = secret_number
        
        
        game_announcement = (
            f"üéÆ <b>–ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!</b> üéÆ\n\n"
            f"üë§ –ó–∞–ø—É—Å—Ç–∏–ª: {message.from_user.first_name}\n"
            f"üî¢ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n\n"
            f"üí° –ß—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            f"<code>/guess –≤–∞—à–µ_—á–∏—Å–ª–æ</code>\n\n"
            f"üéØ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/guess 42</code>\n"
            f"üèÜ –ö—Ç–æ –ø–µ—Ä–≤—ã–π —É–≥–∞–¥–∞–µ—Ç - —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª!"
        )
        
        await message.answer(game_announcement, parse_mode="HTML")
        logger.info(f"–ì—Ä—É–ø–ø–∞: –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –≤ {chat_id}, –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ {secret_number}")

    @dp.message(Command('guess'), F.chat.type.in_({"group", "supergroup"}))
    async def make_guess(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in group_games:
            
            await message.answer(
                "üéØ –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ: /start_game"
            )
            return

        try:
            guess = int(message.text.split()[1])
        except (IndexError, ValueError):
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /guess —á–∏—Å–ª–æ\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /guess 42"
            )
            return

        
        if guess < 1 or guess > 100:
            await message.answer("üìè –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
            return

        secret = group_games[chat_id]
        user_name = message.from_user.first_name

        if guess < secret:
            await message.answer(f"üî∫ {user_name}, –º–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —á–µ–º {guess}!")
        elif guess > secret:
            await message.answer(f"üîª {user_name}, –º–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —á–µ–º {guess}!")
        else:
            # –ü–æ–±–µ–¥–∞!
            victory_message = (
                f"üéâ <b>–ü–û–ë–ï–î–ê!</b> üéâ\n\n"
                f"üèÜ {user_name} —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!\n"
                f"‚úÖ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {secret}\n\n"
                f"üéÆ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ: /start_game"
            )
            await message.answer(victory_message, parse_mode="HTML")
            del group_games[chat_id]
            logger.info(f"–ì—Ä—É–ø–ø–∞: –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {chat_id}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {user_name}")

    
    @dp.message(Command('game_status'), F.chat.type.in_({"group", "supergroup"}))
    async def game_status(message: types.Message):
        chat_id = message.chat.id
        if chat_id in group_games:
            await message.answer(
                "üéÆ –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n"
                "üî¢ –ß–∏—Å–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ, —É–≥–∞–¥—ã–≤–∞–π—Ç–µ!\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /guess —á–∏—Å–ª–æ"
            )
        else:
            await message.answer(
                "ü§∑ –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
                "üéØ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å: /start_game"
            )

    
    @dp.message(Command('badwords'), F.chat.type.in_({"group", "supergroup"}))
    async def show_bad_words(message: types.Message):
        await message.answer(
            f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n" +
            "\n".join([f"‚Ä¢ {word}" for word in BAD_WORDS]) +
            "\n\n‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–∏—Ö —Å–ª–æ–≤ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è!"
        )